"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3Construct = void 0;
const cdk = require("aws-cdk-lib");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const constructs_1 = require("constructs");
class S3Construct extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const corsRule = {
            allowedMethods: [
                aws_cdk_lib_1.aws_s3.HttpMethods.GET,
                aws_cdk_lib_1.aws_s3.HttpMethods.PUT,
                aws_cdk_lib_1.aws_s3.HttpMethods.POST,
                aws_cdk_lib_1.aws_s3.HttpMethods.HEAD
            ],
            allowedOrigins: ['*'],
            allowedHeaders: ['*']
        };
        this.mp3Bucket = new aws_cdk_lib_1.aws_s3.Bucket(this, props.mp3BucketName, {
            publicReadAccess: true,
            bucketName: props.mp3BucketName,
            cors: [corsRule],
            autoDeleteObjects: true,
            removalPolicy: cdk.RemovalPolicy.DESTROY,
            blockPublicAccess: aws_cdk_lib_1.aws_s3.BlockPublicAccess.BLOCK_ACLS,
            accessControl: aws_cdk_lib_1.aws_s3.BucketAccessControl.BUCKET_OWNER_FULL_CONTROL
        });
        this.hlsBucket = new aws_cdk_lib_1.aws_s3.Bucket(this, props.hlsBucketName, {
            publicReadAccess: true,
            bucketName: props.hlsBucketName,
            autoDeleteObjects: true,
            removalPolicy: cdk.RemovalPolicy.DESTROY,
            blockPublicAccess: aws_cdk_lib_1.aws_s3.BlockPublicAccess.BLOCK_ACLS,
            accessControl: aws_cdk_lib_1.aws_s3.BucketAccessControl.BUCKET_OWNER_FULL_CONTROL
        });
    }
}
exports.S3Construct = S3Construct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUzNCdWNrZXRzQ29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUzNCdWNrZXRzQ29uc3RydWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUFtQztBQUNuQyw2Q0FBMkM7QUFDM0MsMkNBQXVDO0FBT3ZDLE1BQWEsV0FBWSxTQUFRLHNCQUFTO0lBSXhDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBbUI7UUFDM0QsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLFFBQVEsR0FBZ0I7WUFDNUIsY0FBYyxFQUFFO2dCQUNkLG9CQUFFLENBQUMsV0FBVyxDQUFDLEdBQUc7Z0JBQ2xCLG9CQUFFLENBQUMsV0FBVyxDQUFDLEdBQUc7Z0JBQ2xCLG9CQUFFLENBQUMsV0FBVyxDQUFDLElBQUk7Z0JBQ25CLG9CQUFFLENBQUMsV0FBVyxDQUFDLElBQUk7YUFDcEI7WUFDRCxjQUFjLEVBQUUsQ0FBQyxHQUFHLENBQUM7WUFDckIsY0FBYyxFQUFFLENBQUMsR0FBRyxDQUFDO1NBQ3RCLENBQUM7UUFFRixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksb0JBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxhQUFhLEVBQUU7WUFDeEQsZ0JBQWdCLEVBQUUsSUFBSTtZQUV0QixVQUFVLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDL0IsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDO1lBQ2hCLGlCQUFpQixFQUFFLElBQUk7WUFDdkIsYUFBYSxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTztZQUN4QyxpQkFBaUIsRUFBRSxvQkFBRSxDQUFDLGlCQUFpQixDQUFDLFVBQVU7WUFDbEQsYUFBYSxFQUFFLG9CQUFFLENBQUMsbUJBQW1CLENBQUMseUJBQXlCO1NBQ2hFLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxvQkFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLGFBQWEsRUFBRTtZQUN4RCxnQkFBZ0IsRUFBRSxJQUFJO1lBQ3RCLFVBQVUsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUMvQixpQkFBaUIsRUFBRSxJQUFJO1lBQ3ZCLGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU87WUFDeEMsaUJBQWlCLEVBQUUsb0JBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVO1lBQ2xELGFBQWEsRUFBRSxvQkFBRSxDQUFDLG1CQUFtQixDQUFDLHlCQUF5QjtTQUNoRSxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUF0Q0Qsa0NBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IGF3c19zMyBhcyBzMyB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuXG5pbnRlcmZhY2UgYnVja2V0c1Byb3BzIHtcbiAgbXAzQnVja2V0TmFtZTogc3RyaW5nO1xuICBobHNCdWNrZXROYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBTM0NvbnN0cnVjdCBleHRlbmRzIENvbnN0cnVjdCB7XG4gIHB1YmxpYyBtcDNCdWNrZXQ6IHMzLkJ1Y2tldDtcbiAgcHVibGljIGhsc0J1Y2tldDogczMuQnVja2V0O1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBidWNrZXRzUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgY29uc3QgY29yc1J1bGU6IHMzLkNvcnNSdWxlID0ge1xuICAgICAgYWxsb3dlZE1ldGhvZHM6IFtcbiAgICAgICAgczMuSHR0cE1ldGhvZHMuR0VULFxuICAgICAgICBzMy5IdHRwTWV0aG9kcy5QVVQsXG4gICAgICAgIHMzLkh0dHBNZXRob2RzLlBPU1QsXG4gICAgICAgIHMzLkh0dHBNZXRob2RzLkhFQURcbiAgICAgIF0sXG4gICAgICBhbGxvd2VkT3JpZ2luczogWycqJ10sXG4gICAgICBhbGxvd2VkSGVhZGVyczogWycqJ11cbiAgICB9O1xuXG4gICAgdGhpcy5tcDNCdWNrZXQgPSBuZXcgczMuQnVja2V0KHRoaXMsIHByb3BzLm1wM0J1Y2tldE5hbWUsIHtcbiAgICAgIHB1YmxpY1JlYWRBY2Nlc3M6IHRydWUsXG5cbiAgICAgIGJ1Y2tldE5hbWU6IHByb3BzLm1wM0J1Y2tldE5hbWUsXG4gICAgICBjb3JzOiBbY29yc1J1bGVdLFxuICAgICAgYXV0b0RlbGV0ZU9iamVjdHM6IHRydWUsXG4gICAgICByZW1vdmFsUG9saWN5OiBjZGsuUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLFxuICAgICAgYmxvY2tQdWJsaWNBY2Nlc3M6IHMzLkJsb2NrUHVibGljQWNjZXNzLkJMT0NLX0FDTFMsXG4gICAgICBhY2Nlc3NDb250cm9sOiBzMy5CdWNrZXRBY2Nlc3NDb250cm9sLkJVQ0tFVF9PV05FUl9GVUxMX0NPTlRST0xcbiAgICB9KTtcblxuICAgIHRoaXMuaGxzQnVja2V0ID0gbmV3IHMzLkJ1Y2tldCh0aGlzLCBwcm9wcy5obHNCdWNrZXROYW1lLCB7XG4gICAgICBwdWJsaWNSZWFkQWNjZXNzOiB0cnVlLFxuICAgICAgYnVja2V0TmFtZTogcHJvcHMuaGxzQnVja2V0TmFtZSxcbiAgICAgIGF1dG9EZWxldGVPYmplY3RzOiB0cnVlLFxuICAgICAgcmVtb3ZhbFBvbGljeTogY2RrLlJlbW92YWxQb2xpY3kuREVTVFJPWSxcbiAgICAgIGJsb2NrUHVibGljQWNjZXNzOiBzMy5CbG9ja1B1YmxpY0FjY2Vzcy5CTE9DS19BQ0xTLFxuICAgICAgYWNjZXNzQ29udHJvbDogczMuQnVja2V0QWNjZXNzQ29udHJvbC5CVUNLRVRfT1dORVJfRlVMTF9DT05UUk9MXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==