"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EC2Construct = void 0;
const cdk = require("aws-cdk-lib");
const ec2 = require("aws-cdk-lib/aws-ec2");
const constructs_1 = require("constructs");
const cdk_ec2_key_pair_1 = require("cdk-ec2-key-pair");
const fs_1 = require("fs");
class EC2Construct extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const vpc = new ec2.Vpc(this, 'ec2Vpc', {
            ipAddresses: ec2.IpAddresses.cidr('10.0.137.0/24'),
            vpcName: 'musifyre-vpc',
            subnetConfiguration: [
                {
                    name: 'musifyrePublicVpc',
                    subnetType: ec2.SubnetType.PUBLIC,
                    cidrMask: 28,
                    mapPublicIpOnLaunch: true
                }
            ]
        });
        const key = new cdk_ec2_key_pair_1.KeyPair(this, 'A-Key-Pair', {
            name: 'musifyre-kp',
            description: 'This is a Key Pair',
            storePublicKey: true
        });
        const publicSubnet = vpc.selectSubnets({
            subnetType: ec2.SubnetType.PUBLIC
        });
        const securityGroup = new ec2.SecurityGroup(this, 'ec2Sg', {
            vpc: vpc,
            allowAllOutbound: true
        });
        securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(80), 'Allow all HTTP traffic');
        securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(22), 'Allow all SSH traffic');
        const machineImage = ec2.MachineImage.genericLinux({
            'us-east-1': 'ami-06db4d78cb1d3bbf9'
        });
        const instanceRole = new cdk.aws_iam.Role(this, 'musifyreInstanceRole', {
            assumedBy: new cdk.aws_iam.ServicePrincipal('ec2.amazonaws.com')
        });
        instanceRole.addToPolicy(new cdk.aws_iam.PolicyStatement({
            effect: cdk.aws_iam.Effect.ALLOW,
            actions: ['s3:PutObject', 's3:GetObject', 's3:PutObjectAcl'],
            resources: [props.s3Arn + '/*'] // Replace with your bucket name
        }));
        const instanceProfile = new cdk.aws_iam.CfnInstanceProfile(this, 'InstanceProfile', {
            roles: [instanceRole.roleName]
        });
        const ec2Instance = new ec2.Instance(this, 'musifyreEC2', {
            vpc,
            instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, // instance class
            ec2.InstanceSize.MICRO // instance type
            ),
            machineImage: machineImage,
            securityGroup: securityGroup,
            associatePublicIpAddress: true,
            vpcSubnets: publicSubnet,
            detailedMonitoring: true,
            keyName: key.keyPairName,
            role: instanceRole
        });
        const userData = (0, fs_1.readFileSync)('data/instance-init.sh', 'utf8');
        ec2Instance.addUserData(userData);
    }
}
exports.EC2Construct = EC2Construct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWMyQ29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZWMyQ29uc3RydWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUFtQztBQUNuQywyQ0FBMkM7QUFDM0MsMkNBQXVDO0FBQ3ZDLHVEQUEyQztBQUMzQywyQkFBa0M7QUFNbEMsTUFBYSxZQUFhLFNBQVEsc0JBQVM7SUFDekMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFlO1FBQ3ZELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUU7WUFDdEMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztZQUNsRCxPQUFPLEVBQUUsY0FBYztZQUN2QixtQkFBbUIsRUFBRTtnQkFDbkI7b0JBQ0UsSUFBSSxFQUFFLG1CQUFtQjtvQkFDekIsVUFBVSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTTtvQkFDakMsUUFBUSxFQUFFLEVBQUU7b0JBQ1osbUJBQW1CLEVBQUUsSUFBSTtpQkFDMUI7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUVILE1BQU0sR0FBRyxHQUFHLElBQUksMEJBQU8sQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFO1lBQzFDLElBQUksRUFBRSxhQUFhO1lBQ25CLFdBQVcsRUFBRSxvQkFBb0I7WUFDakMsY0FBYyxFQUFFLElBQUk7U0FDckIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztZQUNyQyxVQUFVLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNO1NBQ2xDLENBQUMsQ0FBQztRQUVILE1BQU0sYUFBYSxHQUFHLElBQUksR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFO1lBQ3pELEdBQUcsRUFBRSxHQUFHO1lBQ1IsZ0JBQWdCLEVBQUUsSUFBSTtTQUN2QixDQUFDLENBQUM7UUFFSCxhQUFhLENBQUMsY0FBYyxDQUMxQixHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUNsQixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFDaEIsd0JBQXdCLENBQ3pCLENBQUM7UUFFRixhQUFhLENBQUMsY0FBYyxDQUMxQixHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUNsQixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFDaEIsdUJBQXVCLENBQ3hCLENBQUM7UUFFRixNQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztZQUNqRCxXQUFXLEVBQUUsdUJBQXVCO1NBQ3JDLENBQUMsQ0FBQztRQUVILE1BQU0sWUFBWSxHQUFHLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLHNCQUFzQixFQUFFO1lBQ3RFLFNBQVMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUM7U0FDakUsQ0FBQyxDQUFDO1FBRUgsWUFBWSxDQUFDLFdBQVcsQ0FDdEIsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQztZQUM5QixNQUFNLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSztZQUNoQyxPQUFPLEVBQUUsQ0FBQyxjQUFjLEVBQUUsY0FBYyxFQUFFLGlCQUFpQixDQUFDO1lBQzVELFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsZ0NBQWdDO1NBQ2pFLENBQUMsQ0FDSCxDQUFDO1FBRUYsTUFBTSxlQUFlLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUN4RCxJQUFJLEVBQ0osaUJBQWlCLEVBQ2pCO1lBQ0UsS0FBSyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztTQUMvQixDQUNGLENBQUM7UUFFRixNQUFNLFdBQVcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRTtZQUN4RCxHQUFHO1lBQ0gsWUFBWSxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUMvQixHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxpQkFBaUI7WUFDdkMsR0FBRyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCO2FBQ3hDO1lBQ0QsWUFBWSxFQUFFLFlBQVk7WUFDMUIsYUFBYSxFQUFFLGFBQWE7WUFDNUIsd0JBQXdCLEVBQUUsSUFBSTtZQUM5QixVQUFVLEVBQUUsWUFBWTtZQUN4QixrQkFBa0IsRUFBRSxJQUFJO1lBQ3hCLE9BQU8sRUFBRSxHQUFHLENBQUMsV0FBVztZQUN4QixJQUFJLEVBQUUsWUFBWTtTQUNuQixDQUFDLENBQUM7UUFFSCxNQUFNLFFBQVEsR0FBRyxJQUFBLGlCQUFZLEVBQUMsdUJBQXVCLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDL0QsV0FBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwQyxDQUFDO0NBQ0Y7QUF0RkQsb0NBc0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcclxuaW1wb3J0ICogYXMgZWMyIGZyb20gJ2F3cy1jZGstbGliL2F3cy1lYzInO1xyXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcclxuaW1wb3J0IHsgS2V5UGFpciB9IGZyb20gJ2Nkay1lYzIta2V5LXBhaXInO1xyXG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7XHJcblxyXG5pbnRlcmZhY2UgZWMyUHJvcHMge1xyXG4gIHMzQXJuOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFQzJDb25zdHJ1Y3QgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xyXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBlYzJQcm9wcykge1xyXG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcclxuXHJcbiAgICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyh0aGlzLCAnZWMyVnBjJywge1xyXG4gICAgICBpcEFkZHJlc3NlczogZWMyLklwQWRkcmVzc2VzLmNpZHIoJzEwLjAuMTM3LjAvMjQnKSxcclxuICAgICAgdnBjTmFtZTogJ211c2lmeXJlLXZwYycsXHJcbiAgICAgIHN1Ym5ldENvbmZpZ3VyYXRpb246IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICBuYW1lOiAnbXVzaWZ5cmVQdWJsaWNWcGMnLFxyXG4gICAgICAgICAgc3VibmV0VHlwZTogZWMyLlN1Ym5ldFR5cGUuUFVCTElDLFxyXG4gICAgICAgICAgY2lkck1hc2s6IDI4LFxyXG4gICAgICAgICAgbWFwUHVibGljSXBPbkxhdW5jaDogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgXVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3Qga2V5ID0gbmV3IEtleVBhaXIodGhpcywgJ0EtS2V5LVBhaXInLCB7XHJcbiAgICAgIG5hbWU6ICdtdXNpZnlyZS1rcCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnVGhpcyBpcyBhIEtleSBQYWlyJyxcclxuICAgICAgc3RvcmVQdWJsaWNLZXk6IHRydWVcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHB1YmxpY1N1Ym5ldCA9IHZwYy5zZWxlY3RTdWJuZXRzKHtcclxuICAgICAgc3VibmV0VHlwZTogZWMyLlN1Ym5ldFR5cGUuUFVCTElDXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBzZWN1cml0eUdyb3VwID0gbmV3IGVjMi5TZWN1cml0eUdyb3VwKHRoaXMsICdlYzJTZycsIHtcclxuICAgICAgdnBjOiB2cGMsXHJcbiAgICAgIGFsbG93QWxsT3V0Ym91bmQ6IHRydWVcclxuICAgIH0pO1xyXG5cclxuICAgIHNlY3VyaXR5R3JvdXAuYWRkSW5ncmVzc1J1bGUoXHJcbiAgICAgIGVjMi5QZWVyLmFueUlwdjQoKSxcclxuICAgICAgZWMyLlBvcnQudGNwKDgwKSxcclxuICAgICAgJ0FsbG93IGFsbCBIVFRQIHRyYWZmaWMnXHJcbiAgICApO1xyXG5cclxuICAgIHNlY3VyaXR5R3JvdXAuYWRkSW5ncmVzc1J1bGUoXHJcbiAgICAgIGVjMi5QZWVyLmFueUlwdjQoKSxcclxuICAgICAgZWMyLlBvcnQudGNwKDIyKSxcclxuICAgICAgJ0FsbG93IGFsbCBTU0ggdHJhZmZpYydcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgbWFjaGluZUltYWdlID0gZWMyLk1hY2hpbmVJbWFnZS5nZW5lcmljTGludXgoe1xyXG4gICAgICAndXMtZWFzdC0xJzogJ2FtaS0wNmRiNGQ3OGNiMWQzYmJmOSdcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGluc3RhbmNlUm9sZSA9IG5ldyBjZGsuYXdzX2lhbS5Sb2xlKHRoaXMsICdtdXNpZnlyZUluc3RhbmNlUm9sZScsIHtcclxuICAgICAgYXNzdW1lZEJ5OiBuZXcgY2RrLmF3c19pYW0uU2VydmljZVByaW5jaXBhbCgnZWMyLmFtYXpvbmF3cy5jb20nKVxyXG4gICAgfSk7XHJcblxyXG4gICAgaW5zdGFuY2VSb2xlLmFkZFRvUG9saWN5KFxyXG4gICAgICBuZXcgY2RrLmF3c19pYW0uUG9saWN5U3RhdGVtZW50KHtcclxuICAgICAgICBlZmZlY3Q6IGNkay5hd3NfaWFtLkVmZmVjdC5BTExPVyxcclxuICAgICAgICBhY3Rpb25zOiBbJ3MzOlB1dE9iamVjdCcsICdzMzpHZXRPYmplY3QnLCAnczM6UHV0T2JqZWN0QWNsJ10sXHJcbiAgICAgICAgcmVzb3VyY2VzOiBbcHJvcHMuczNBcm4gKyAnLyonXSAvLyBSZXBsYWNlIHdpdGggeW91ciBidWNrZXQgbmFtZVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBpbnN0YW5jZVByb2ZpbGUgPSBuZXcgY2RrLmF3c19pYW0uQ2ZuSW5zdGFuY2VQcm9maWxlKFxyXG4gICAgICB0aGlzLFxyXG4gICAgICAnSW5zdGFuY2VQcm9maWxlJyxcclxuICAgICAge1xyXG4gICAgICAgIHJvbGVzOiBbaW5zdGFuY2VSb2xlLnJvbGVOYW1lXVxyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGVjMkluc3RhbmNlID0gbmV3IGVjMi5JbnN0YW5jZSh0aGlzLCAnbXVzaWZ5cmVFQzInLCB7XHJcbiAgICAgIHZwYyxcclxuICAgICAgaW5zdGFuY2VUeXBlOiBlYzIuSW5zdGFuY2VUeXBlLm9mKFxyXG4gICAgICAgIGVjMi5JbnN0YW5jZUNsYXNzLlQyLCAvLyBpbnN0YW5jZSBjbGFzc1xyXG4gICAgICAgIGVjMi5JbnN0YW5jZVNpemUuTUlDUk8gLy8gaW5zdGFuY2UgdHlwZVxyXG4gICAgICApLFxyXG4gICAgICBtYWNoaW5lSW1hZ2U6IG1hY2hpbmVJbWFnZSxcclxuICAgICAgc2VjdXJpdHlHcm91cDogc2VjdXJpdHlHcm91cCxcclxuICAgICAgYXNzb2NpYXRlUHVibGljSXBBZGRyZXNzOiB0cnVlLFxyXG4gICAgICB2cGNTdWJuZXRzOiBwdWJsaWNTdWJuZXQsXHJcbiAgICAgIGRldGFpbGVkTW9uaXRvcmluZzogdHJ1ZSxcclxuICAgICAga2V5TmFtZToga2V5LmtleVBhaXJOYW1lLFxyXG4gICAgICByb2xlOiBpbnN0YW5jZVJvbGVcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHVzZXJEYXRhID0gcmVhZEZpbGVTeW5jKCdkYXRhL2luc3RhbmNlLWluaXQuc2gnLCAndXRmOCcpO1xyXG4gICAgZWMySW5zdGFuY2UuYWRkVXNlckRhdGEodXNlckRhdGEpO1xyXG4gIH1cclxufVxyXG4iXX0=