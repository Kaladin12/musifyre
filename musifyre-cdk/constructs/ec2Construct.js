"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EC2Construct = void 0;
const cdk = require("aws-cdk-lib");
const ec2 = require("aws-cdk-lib/aws-ec2");
const constructs_1 = require("constructs");
const cdk_ec2_key_pair_1 = require("cdk-ec2-key-pair");
const fs_1 = require("fs");
const path = require("path");
class EC2Construct extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const vpc = new ec2.Vpc(this, 'ec2Vpc', {
            ipAddresses: ec2.IpAddresses.cidr('10.0.137.0/24'),
            vpcName: 'musifyre-vpc',
            subnetConfiguration: [
                {
                    name: 'musifyrePublicVpc',
                    subnetType: ec2.SubnetType.PUBLIC,
                    cidrMask: 28,
                    mapPublicIpOnLaunch: true
                }
            ]
        });
        const key = new cdk_ec2_key_pair_1.KeyPair(this, 'A-Key-Pair', {
            name: 'musifyre-kp',
            description: 'This is a Key Pair',
            storePublicKey: true
        });
        const publicSubnet = vpc.selectSubnets({
            subnetType: ec2.SubnetType.PUBLIC
        });
        const securityGroup = new ec2.SecurityGroup(this, 'ec2Sg', {
            vpc: vpc,
            allowAllOutbound: true
        });
        securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(80), 'Allow all HTTP traffic');
        securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(22), 'Allow all SSH traffic');
        const machineImage = ec2.MachineImage.genericLinux({
            'us-east-1': 'ami-06db4d78cb1d3bbf9'
        });
        const instanceRole = new cdk.aws_iam.Role(this, 'musifyreInstanceRole', {
            assumedBy: new cdk.aws_iam.ServicePrincipal('ec2.amazonaws.com')
        });
        instanceRole.addToPolicy(new cdk.aws_iam.PolicyStatement({
            effect: cdk.aws_iam.Effect.ALLOW,
            actions: ['s3:PutObject', 's3:GetObject', 's3:PutObjectAcl'],
            resources: [props.s3Arn + '/*'] // Replace with your bucket name
        }));
        const instanceProfile = new cdk.aws_iam.CfnInstanceProfile(this, 'InstanceProfile', {
            roles: [instanceRole.roleName]
        });
        const ec2Instance = new ec2.Instance(this, 'musifyreEC2', {
            vpc,
            instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, // instance class
            ec2.InstanceSize.MICRO // instance type
            ),
            machineImage: machineImage,
            securityGroup: securityGroup,
            associatePublicIpAddress: true,
            vpcSubnets: publicSubnet,
            detailedMonitoring: true,
            keyName: key.keyPairName,
            role: instanceRole
        });
        const filePath = path.join(__dirname, '../data/instance-init.sh');
        const userData = (0, fs_1.readFileSync)(filePath, 'utf8');
        ec2Instance.addUserData(userData);
    }
}
exports.EC2Construct = EC2Construct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWMyQ29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZWMyQ29uc3RydWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUFtQztBQUNuQywyQ0FBMkM7QUFDM0MsMkNBQXVDO0FBQ3ZDLHVEQUEyQztBQUMzQywyQkFBa0M7QUFDbEMsNkJBQThCO0FBTTlCLE1BQWEsWUFBYSxTQUFRLHNCQUFTO0lBQ3pDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBZTtRQUN2RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFO1lBQ3RDLFdBQVcsRUFBRSxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7WUFDbEQsT0FBTyxFQUFFLGNBQWM7WUFDdkIsbUJBQW1CLEVBQUU7Z0JBQ25CO29CQUNFLElBQUksRUFBRSxtQkFBbUI7b0JBQ3pCLFVBQVUsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU07b0JBQ2pDLFFBQVEsRUFBRSxFQUFFO29CQUNaLG1CQUFtQixFQUFFLElBQUk7aUJBQzFCO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLEdBQUcsR0FBRyxJQUFJLDBCQUFPLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRTtZQUMxQyxJQUFJLEVBQUUsYUFBYTtZQUNuQixXQUFXLEVBQUUsb0JBQW9CO1lBQ2pDLGNBQWMsRUFBRSxJQUFJO1NBQ3JCLENBQUMsQ0FBQztRQUVILE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUM7WUFDckMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTTtTQUNsQyxDQUFDLENBQUM7UUFFSCxNQUFNLGFBQWEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRTtZQUN6RCxHQUFHLEVBQUUsR0FBRztZQUNSLGdCQUFnQixFQUFFLElBQUk7U0FDdkIsQ0FBQyxDQUFDO1FBRUgsYUFBYSxDQUFDLGNBQWMsQ0FDMUIsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFDbEIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQ2hCLHdCQUF3QixDQUN6QixDQUFDO1FBRUYsYUFBYSxDQUFDLGNBQWMsQ0FDMUIsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFDbEIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQ2hCLHVCQUF1QixDQUN4QixDQUFDO1FBRUYsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUM7WUFDakQsV0FBVyxFQUFFLHVCQUF1QjtTQUNyQyxDQUFDLENBQUM7UUFFSCxNQUFNLFlBQVksR0FBRyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxzQkFBc0IsRUFBRTtZQUN0RSxTQUFTLEVBQUUsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDO1NBQ2pFLENBQUMsQ0FBQztRQUVILFlBQVksQ0FBQyxXQUFXLENBQ3RCLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUM7WUFDOUIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUs7WUFDaEMsT0FBTyxFQUFFLENBQUMsY0FBYyxFQUFFLGNBQWMsRUFBRSxpQkFBaUIsQ0FBQztZQUM1RCxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLGdDQUFnQztTQUNqRSxDQUFDLENBQ0gsQ0FBQztRQUVGLE1BQU0sZUFBZSxHQUFHLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FDeEQsSUFBSSxFQUNKLGlCQUFpQixFQUNqQjtZQUNFLEtBQUssRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7U0FDL0IsQ0FDRixDQUFDO1FBRUYsTUFBTSxXQUFXLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUU7WUFDeEQsR0FBRztZQUNILFlBQVksRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FDL0IsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsaUJBQWlCO1lBQ3ZDLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLGdCQUFnQjthQUN4QztZQUNELFlBQVksRUFBRSxZQUFZO1lBQzFCLGFBQWEsRUFBRSxhQUFhO1lBQzVCLHdCQUF3QixFQUFFLElBQUk7WUFDOUIsVUFBVSxFQUFFLFlBQVk7WUFDeEIsa0JBQWtCLEVBQUUsSUFBSTtZQUN4QixPQUFPLEVBQUUsR0FBRyxDQUFDLFdBQVc7WUFDeEIsSUFBSSxFQUFFLFlBQVk7U0FDbkIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztRQUNsRSxNQUFNLFFBQVEsR0FBRyxJQUFBLGlCQUFZLEVBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2hELFdBQVcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEMsQ0FBQztDQUNGO0FBdkZELG9DQXVGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XHJcbmltcG9ydCAqIGFzIGVjMiBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWMyJztcclxuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XHJcbmltcG9ydCB7IEtleVBhaXIgfSBmcm9tICdjZGstZWMyLWtleS1wYWlyJztcclxuaW1wb3J0IHsgcmVhZEZpbGVTeW5jIH0gZnJvbSAnZnMnO1xyXG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcclxuXHJcbmludGVyZmFjZSBlYzJQcm9wcyB7XHJcbiAgczNBcm46IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEVDMkNvbnN0cnVjdCBleHRlbmRzIENvbnN0cnVjdCB7XHJcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IGVjMlByb3BzKSB7XHJcbiAgICBzdXBlcihzY29wZSwgaWQpO1xyXG5cclxuICAgIGNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHRoaXMsICdlYzJWcGMnLCB7XHJcbiAgICAgIGlwQWRkcmVzc2VzOiBlYzIuSXBBZGRyZXNzZXMuY2lkcignMTAuMC4xMzcuMC8yNCcpLFxyXG4gICAgICB2cGNOYW1lOiAnbXVzaWZ5cmUtdnBjJyxcclxuICAgICAgc3VibmV0Q29uZmlndXJhdGlvbjogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIG5hbWU6ICdtdXNpZnlyZVB1YmxpY1ZwYycsXHJcbiAgICAgICAgICBzdWJuZXRUeXBlOiBlYzIuU3VibmV0VHlwZS5QVUJMSUMsXHJcbiAgICAgICAgICBjaWRyTWFzazogMjgsXHJcbiAgICAgICAgICBtYXBQdWJsaWNJcE9uTGF1bmNoOiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICBdXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBrZXkgPSBuZXcgS2V5UGFpcih0aGlzLCAnQS1LZXktUGFpcicsIHtcclxuICAgICAgbmFtZTogJ211c2lmeXJlLWtwJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdUaGlzIGlzIGEgS2V5IFBhaXInLFxyXG4gICAgICBzdG9yZVB1YmxpY0tleTogdHJ1ZVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgcHVibGljU3VibmV0ID0gdnBjLnNlbGVjdFN1Ym5ldHMoe1xyXG4gICAgICBzdWJuZXRUeXBlOiBlYzIuU3VibmV0VHlwZS5QVUJMSUNcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHNlY3VyaXR5R3JvdXAgPSBuZXcgZWMyLlNlY3VyaXR5R3JvdXAodGhpcywgJ2VjMlNnJywge1xyXG4gICAgICB2cGM6IHZwYyxcclxuICAgICAgYWxsb3dBbGxPdXRib3VuZDogdHJ1ZVxyXG4gICAgfSk7XHJcblxyXG4gICAgc2VjdXJpdHlHcm91cC5hZGRJbmdyZXNzUnVsZShcclxuICAgICAgZWMyLlBlZXIuYW55SXB2NCgpLFxyXG4gICAgICBlYzIuUG9ydC50Y3AoODApLFxyXG4gICAgICAnQWxsb3cgYWxsIEhUVFAgdHJhZmZpYydcclxuICAgICk7XHJcblxyXG4gICAgc2VjdXJpdHlHcm91cC5hZGRJbmdyZXNzUnVsZShcclxuICAgICAgZWMyLlBlZXIuYW55SXB2NCgpLFxyXG4gICAgICBlYzIuUG9ydC50Y3AoMjIpLFxyXG4gICAgICAnQWxsb3cgYWxsIFNTSCB0cmFmZmljJ1xyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBtYWNoaW5lSW1hZ2UgPSBlYzIuTWFjaGluZUltYWdlLmdlbmVyaWNMaW51eCh7XHJcbiAgICAgICd1cy1lYXN0LTEnOiAnYW1pLTA2ZGI0ZDc4Y2IxZDNiYmY5J1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgaW5zdGFuY2VSb2xlID0gbmV3IGNkay5hd3NfaWFtLlJvbGUodGhpcywgJ211c2lmeXJlSW5zdGFuY2VSb2xlJywge1xyXG4gICAgICBhc3N1bWVkQnk6IG5ldyBjZGsuYXdzX2lhbS5TZXJ2aWNlUHJpbmNpcGFsKCdlYzIuYW1hem9uYXdzLmNvbScpXHJcbiAgICB9KTtcclxuXHJcbiAgICBpbnN0YW5jZVJvbGUuYWRkVG9Qb2xpY3koXHJcbiAgICAgIG5ldyBjZGsuYXdzX2lhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xyXG4gICAgICAgIGVmZmVjdDogY2RrLmF3c19pYW0uRWZmZWN0LkFMTE9XLFxyXG4gICAgICAgIGFjdGlvbnM6IFsnczM6UHV0T2JqZWN0JywgJ3MzOkdldE9iamVjdCcsICdzMzpQdXRPYmplY3RBY2wnXSxcclxuICAgICAgICByZXNvdXJjZXM6IFtwcm9wcy5zM0FybiArICcvKiddIC8vIFJlcGxhY2Ugd2l0aCB5b3VyIGJ1Y2tldCBuYW1lXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGluc3RhbmNlUHJvZmlsZSA9IG5ldyBjZGsuYXdzX2lhbS5DZm5JbnN0YW5jZVByb2ZpbGUoXHJcbiAgICAgIHRoaXMsXHJcbiAgICAgICdJbnN0YW5jZVByb2ZpbGUnLFxyXG4gICAgICB7XHJcbiAgICAgICAgcm9sZXM6IFtpbnN0YW5jZVJvbGUucm9sZU5hbWVdXHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgZWMySW5zdGFuY2UgPSBuZXcgZWMyLkluc3RhbmNlKHRoaXMsICdtdXNpZnlyZUVDMicsIHtcclxuICAgICAgdnBjLFxyXG4gICAgICBpbnN0YW5jZVR5cGU6IGVjMi5JbnN0YW5jZVR5cGUub2YoXHJcbiAgICAgICAgZWMyLkluc3RhbmNlQ2xhc3MuVDIsIC8vIGluc3RhbmNlIGNsYXNzXHJcbiAgICAgICAgZWMyLkluc3RhbmNlU2l6ZS5NSUNSTyAvLyBpbnN0YW5jZSB0eXBlXHJcbiAgICAgICksXHJcbiAgICAgIG1hY2hpbmVJbWFnZTogbWFjaGluZUltYWdlLFxyXG4gICAgICBzZWN1cml0eUdyb3VwOiBzZWN1cml0eUdyb3VwLFxyXG4gICAgICBhc3NvY2lhdGVQdWJsaWNJcEFkZHJlc3M6IHRydWUsXHJcbiAgICAgIHZwY1N1Ym5ldHM6IHB1YmxpY1N1Ym5ldCxcclxuICAgICAgZGV0YWlsZWRNb25pdG9yaW5nOiB0cnVlLFxyXG4gICAgICBrZXlOYW1lOiBrZXkua2V5UGFpck5hbWUsXHJcbiAgICAgIHJvbGU6IGluc3RhbmNlUm9sZVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgZmlsZVBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vZGF0YS9pbnN0YW5jZS1pbml0LnNoJyk7XHJcbiAgICBjb25zdCB1c2VyRGF0YSA9IHJlYWRGaWxlU3luYyhmaWxlUGF0aCwgJ3V0ZjgnKTtcclxuICAgIGVjMkluc3RhbmNlLmFkZFVzZXJEYXRhKHVzZXJEYXRhKTtcclxuICB9XHJcbn1cclxuIl19